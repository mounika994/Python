{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "951cb5e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This is a comment \n",
    "Num = 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e8d16c50",
   "metadata": {},
   "outputs": [],
   "source": [
    "num2 = 10.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0f199658",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "float"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(num2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7f50d22",
   "metadata": {},
   "outputs": [],
   "source": [
    " print(num)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d61ecc5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "str1 =\"mounika gulla\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "43900628",
   "metadata": {},
   "outputs": [],
   "source": [
    "complexnum1 = 100 + 10j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "61a4642c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "complex"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(complexnum1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "59fa49e0",
   "metadata": {},
   "outputs": [],
   "source": [
    "str2 = \"welcome to phyton programming!\"\n",
    "str3 = 'hello, this is first phyton session'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2cf2258e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "welcome to phyton programming!\n",
      "hello, this is first phyton session\n"
     ]
    }
   ],
   "source": [
    "print(str2)\n",
    "print(str3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f4ba48d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "is_game_on = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d4274fd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "is_game_on"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "31192088",
   "metadata": {},
   "outputs": [],
   "source": [
    "color_list = [\"red\",\"orange\",\"blue\",\"yellow\",\"white\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "45636336",
   "metadata": {},
   "outputs": [],
   "source": [
    "number_list = [1,2,3,5,\"white\",100.4,70,9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d8849e78",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['red', 'orange', 'blue', 'yellow', 'white']\n"
     ]
    }
   ],
   "source": [
    "print(color_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "614378c6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'red'"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "color_list[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8e17f6ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "number_list[6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6c2e23e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = 100\n",
    "b = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "affda234",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a > 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "c84d692a",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after 'if' statement on line 1 (2080493563.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[46], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    print (\"All positive\")\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after 'if' statement on line 1\n"
     ]
    }
   ],
   "source": [
    "if(a > 0) and ( b > 0):\n",
    "print (\"All positive\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "4a132909",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "110"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "a63b0ee3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "90"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a - b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "7fc20583",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1000"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a * b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a54c5b6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "a += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "de3918b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = a + 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "9376f29b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n1 = 101\n",
    "n2 = 5\n",
    "n1 % n2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "227cdde2",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1250984977.py, line 4)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[58], line 4\u001b[1;36m\u001b[0m\n\u001b[1;33m    else;\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "color_list = [\"red\",\"orange\",\"blue\",\"yellow\",\"white\"]\n",
    "if \"green\" in color_list :\n",
    "    print (\"Green is present\")\n",
    "    else;\n",
    "        print(\"Green is not present\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "56c82f66",
   "metadata": {},
   "outputs": [],
   "source": [
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7434e93e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "54108940",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "af415750",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0dd1e869",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e011e60a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
